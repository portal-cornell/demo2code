==========================summarizing demo==========================
[[Reasoning:]]
The input trajectory contains state predicates because the trajectory talks about the status of the robot ('robot1' is holding 'patty1') and the status of the objects ('patty1' is not at 'table5'). 
I will summarize the state trajectory into low-level actions. 
Low-level actions are not compacted enough yet because low-level actions can still be combined into high-level subtasks. 
The new trajectory will NOT be sufficiently summarized.
[[Is the new trajectory sufficiently summarized? (yes/no):]]
no
[[Summarized trajectory:]]
* In [Scenario 1], at state 2, the robot picked up 'patty1'.
* At state 3, the robot moved from 'table5' to 'table2'.
* At state 4, the robot placed 'patty1' on top of 'bottom_bun1' at location 'table2'.
* At state 5, the robot moved from 'table2' to 'table5'.
* At state 6, the robot picked up 'patty2'.
* At state 7, the robot moved from 'table5' to 'table3'.
* At state 8, the robot placed 'patty2' on top of 'bottom_bun2' at location 'table3'.
* At state 9, the robot moved from 'table3' to 'table4'.
* At state 10, the robot picked up 'top_bun1'.
* At state 11, the robot moved from 'table4' to 'table2'.
* At state 12, the robot placed 'top_bun1' on top of 'patty1' at location 'table2'.
* At state 13, the robot moved from 'table2' to 'table4'.
* At state 14, the robot picked up 'top_bun2'.
* At state 15, the robot moved from 'table4' to 'table3'.
* At state 16, the robot placed 'top_bun2' on top of 'patty2' at location 'table3'.

==========================summarizing demo==========================
[[Reasoning:]]
The input trajectory contains state predicates because the trajectory talks about the status of the robot ('robot1' is holding 'patty4') and the status of the objects ('patty4' is not at 'table6'). 
I will summarize the state trajectory into low-level actions. 
Low-level actions are not compacted enough yet because low-level actions can still be combined into high-level subtasks. 
The new trajectory will NOT be sufficiently summarized.
[[Is the new trajectory sufficiently summarized? (yes/no):]]
no
[[Summarized trajectory:]]
* In [Scenario 2], at state 2, the robot picked up 'patty4'.
* At state 3, the robot moved from 'table6' to 'table3'.
* At state 4, the robot placed 'patty4' on top of 'bottom_bun3' at location 'table3'.
* At state 5, the robot moved from 'table3' to 'table6'.
* At state 6, the robot picked up 'patty5'.
* At state 7, the robot moved from 'table6' to 'table4'.
* At state 8, the robot placed 'patty5' on top of 'bottom_bun4' at location 'table4'.
* At state 9, the robot moved from 'table4' to 'stove4'.
* At state 10, the robot picked up 'top_bun3'.
* At state 11, the robot moved from 'stove4' to 'table3'.
* At state 12, the robot placed 'top_bun3' on top of 'patty4' at location 'table3'.
* At state 13, the robot moved from 'table3' to 'table7'.
* At state 14, the robot picked up 'top_bun4'.
* At state 15, the robot moved from 'table7' to 'table4'.
* At state 16, the robot placed 'top_bun4' on top of 'patty5' at location 'table4'.

==========================summarizing demo==========================
[[Reasoning:]]
The input trajectory contains low-level actions because the trajectory mentions "picked up", "moved", etc. 
I will summarize the low-level action trajectory into high-level subtasks. 
High-level subtask trajectory is the most compacted form that cannot be summarized anymore.
The new trajectory will be sufficiently summarized.
[[Is the new trajectory sufficiently summarized? (yes/no):]]
yes
[[Summarized trajectory:]]
* In [Scenario 1], at state 2-4, the subtask is "stack patty on top of bottom bun". This subtask contains: 1. picking up 'patty1' (state 2) 2. moving to stack 'patty1' on 'bottom_bun1' (state 3-4)
* At state 5-8, the subtask is "stack patty on top of bottom bun". This subtask contains: 1. moving to pick up 'patty2' (state 5-6) 2. moving to stack 'patty2' on 'bottom_bun2' (state 7-8)
* At state 9-12, the subtask is "stack top bun on top of patty". This subtask contains: 1. moving to pick up 'top_bun1' (state 10-11) 2. moving to stack 'top_bun1' on 'patty1' (state 12)
* At state 13-16, the subtask is "stack top bun on top of patty". This subtask contains: 1. moving to pick up 'top_bun2' (state 14) 2. moving to stack 'top_bun2' on 'patty2' (state 15-16)

==========================summarizing demo==========================
[[Reasoning:]]
The input trajectory contains low-level actions because the trajectory mentions "picked up", "moved", etc. 
I will summarize the low-level action trajectory into high-level subtasks. 
High-level subtask trajectory is the most compacted form that cannot be summarized anymore.
The new trajectory will be sufficiently summarized.
[[Is the new trajectory sufficiently summarized? (yes/no):]]
yes
[[Summarized trajectory:]]
* In [Scenario 2], at state 2-4, the subtask is "stack patty on top of bottom bun". This subtask contains: 1. picking up 'patty4' (state 2) 2. moving to stack 'patty4' on 'bottom_bun3' (state 3-4)
* At state 5-8, the subtask is "stack patty on top of bottom bun". This subtask contains: 1. picking up 'patty5' (state 6) 2. moving to stack 'patty5' on 'bottom_bun4' (state 7-8)
* At state 9-12, the subtask is "stack top bun on top of patty". This subtask contains: 1. moving to pick up 'top_bun3' (state 10-11) 2. moving to stack 'top_bun3' on 'patty4' (state 12)
* At state 13-16, the subtask is "stack top bun on top of patty". This subtask contains: 1. moving to pick up 'top_bun4' (state 14) 2. moving to stack 'top_bun4' on 'patty5' (state 15-16)

==========================summary -> spec==========================
[[Reasoning:]]
* In [Scenario 1]'s unique kitchen environment, the subtasks were executed in this order: ['stack patty on top of bottom bun', 'stack patty on top of bottom bun', 'stack top bun on top of patty', 'stack top bun on top of patty'].
* In [Scenario 2]'s unique kitchen environment, the subtasks were executed in this order: ['stack patty on top of bottom bun', 'stack patty on top of bottom bun', 'stack top bun on top of patty', 'stack top bun on top of patty'].
* Both scenarios are executing the subtasks in the same order.
* There is no repetition or loop in the subtask ordering for any individual scenario.
[[Task Specification:]]
Make two burgers. Because there are already a stack of two cooked patties, use them to make the burgers.

Specifically:
Get a list of all the cooked patties in the kitchen.
Get a list of all the bottom buns in the kitchen.
Get a list of all the top buns in the kitchen.

Decide a patty to use.
Decide a bottom bun to use.
Stack the patty on top of the bottom bun.

Decide a patty to use.
Decide a bottom bun to use.
Stack the patty on top of the bottom bun.

Decide a top bun to use.
Stack the top bun on top of the patty.

Decide a top bun to use.
Stack the top bun on top of the patty.

